##########################################################################
#
#==================LICENSE_START==========================================
#
#
# Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#==================LICENSE_END============================================
#
# ECOMP is a trademark and service mark of AT&T Intellectual Property.
#
##########################################################################

heat_template_version: 2015-10-15

description: Heat template to install ONAP components

##############
#            #
# PARAMETERS #
#            #
##############

parameters:

  ##############################################
  #                                            #
  # Parameters used across all ONAP components #
  #                                            #
  ##############################################

  public_net_id:
    type: string
    description: The ID of the Public network for floating IP address allocation

  ubuntu_1604_image:
    type: string
    description: Name of the Ubuntu 16.04 image

  flavor_xlarge:
    type: string
    description: Name of the Extra Large Flavor supported by the cloud provider

  vm_base_name:
    type: string
    description: Base name of ONAP VMs

  key_name:
    type: string
    description: Public/Private key pair name

  pub_key:
    type: string
    description: Public key to be installed on the compute instance

  nexus_artifact_repo:
    type: string
    description: Complete URL for the Nexus repository for Maven artifacts.
    default: "https://nexus.onap.org"

  nexus_docker_repo:
    type: string
    description: Complete URL for the Nexus repository for docker images.

  nexus_username:
    type: string
    description: Nexus Repository username

  nexus_password:
    type: string
    description: Nexus Repository Password

  artifacts_version:
    type: string
    description: Artifacts version of ONAP components

  cloud_env:
    type: string
    description: Cloud Provider Name in lower case

  ######################
  #                    #
  # Network parameters #
  #                    #
  ######################

  dns_list:
    type: comma_delimited_list
    description: List of External DNS for OAM ONAP network

  external_dns:
    type: string
    description: Public IP of the external DNS for ONAP network

  oam_network_cidr:
    type: string
    description: CIDR of the OAM ONAP network


  ### Private IP addresses ###
  aai1_ip_addr:
    type: string
  aai2_ip_addr:
    type: string
  appc_ip_addr:
    type: string
  dcae_ip_addr:
    type: string
  dns_ip_addr:
    type: string
  so_ip_addr:
    type: string
  mr_ip_addr:
    type: string
  policy_ip_addr:
    type: string
  portal_ip_addr:
    type: string
  robot_ip_addr:
    type: string
  sdc_ip_addr:
    type: string
  sdnc_ip_addr:
    type: string
  vid_ip_addr:
    type: string
  clamp_ip_addr:
    type: string
  openo_ip_addr:
    type: string

  #####################
  #                   #
  # ONAP repositories #
  #                   #
  #####################


  vnfsdk_repo:
    type: string

  ################################
  #                              #
  # Docker versions and branches #
  #                              #
  ################################


  vnfsdk_branch:
    type: string

  msb_docker:
    type: string
  mvim_docker:
    type: string
  mvim_openstack_docker:
    type: string
  uui_docker:
    type: string
  esr_docker:
    type: string

  vfc_nokia_docker:
    type: string
  vfc_nokiav2_docker:
    type: string
  vfc_ztevnfmdriver_docker:
    type: string
  vfc_ztesdncdriver_docker:
    type: string
  vfc_vnfres_docker:
    type: string
  vfc_vnfmgr_docker:
    type: string
  vfc_vnflcm_docker:
    type: string
  vfc_resmanagement_docker:
    type: string
  vfc_nslcm_docker:
    type: string
  vfc_huawei_docker:
    type: string
  vfc_jujudriver_docker:
    type: string
  vfc_gvnfmdriver_docker:
    type: string
  vfc_emsdriver_docker:
    type: string
  vfc_catalog_docker:
    type: string
  vfc_wfengine_mgrservice_docker:
    type: string
  vfc_wfengine_activiti_docker:
    type: string
  vfc_multivimproxy_docker:
    type: string


#############
#           #
# RESOURCES #
#           #
#############

resources:
  random-str:
    type: OS::Heat::RandomString
    properties:
      length: 4

  # Public key used to access ONAP components
  vm_key:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: base_rand
          params:
            base: { get_param: key_name }
            rand: { get_resource: random-str }
      public_key: { get_param: pub_key }
      save_private_key: false


  # ONAP security group
  onap_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: base_rand
          params:
            base: onap_sg
            rand: { get_resource: random-str }
      description: security group used by ONAP
      rules:
        # All egress traffic
        - direction: egress
          ethertype: IPv4
        - direction: egress
          ethertype: IPv6
        # ingress traffic
        # ICMP
        - protocol: icmp
        - protocol: udp
          port_range_min: 1
          port_range_max: 65535
        - protocol: tcp
          port_range_min: 1
          port_range_max: 65535



  # ONAP management private network
  oam_onap:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: oam_onap_rand
          params:
            rand: { get_resource: random-str }

  oam_onap_subnet:
    type: OS::Neutron::Subnet
    properties:
      name:
        str_replace:
          template: oam_onap_rand
          params:
            rand: { get_resource: random-str }
      network_id: { get_resource: oam_onap }
      cidr: { get_param: oam_network_cidr }
      dns_nameservers: { get_param: dns_list }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net_id }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: oam_onap_subnet }



  # OPEN-O VM instantiation
  openo_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: openo_ip_addr }}]
      security_groups:
      - { get_resource: onap_sg }

  openo_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: openo_private_port }

  openo_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1604_image }
      flavor: { get_param: flavor_xlarge }
      name:
        str_replace:
          template: base-multi-service
          params:
            base: { get_param: vm_base_name }
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: openo_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_artifact_repo__: { get_param: nexus_artifact_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __oam_network_cidr__: { get_param: oam_network_cidr }
            __aai1_ip_addr__: { get_param: aai1_ip_addr }
            __aai2_ip_addr__: { get_param: aai2_ip_addr }
            __appc_ip_addr__: { get_param: appc_ip_addr }
            __dcae_ip_addr__: { get_param: dcae_ip_addr }
            __so_ip_addr__: { get_param: so_ip_addr }
            __mr_ip_addr__: { get_param: mr_ip_addr }
            __policy_ip_addr__: { get_param: policy_ip_addr }
            __portal_ip_addr__: { get_param: portal_ip_addr }
            __robot_ip_addr__: { get_param: robot_ip_addr }
            __sdc_ip_addr__: { get_param: sdc_ip_addr }
            __sdnc_ip_addr__: { get_param: sdnc_ip_addr }
            __vid_ip_addr__: { get_param: vid_ip_addr }
            __clamp_ip_addr__: { get_param: clamp_ip_addr }
            __openo_ip_addr__: { get_param: openo_ip_addr }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
            __vnfsdk_branch__: { get_param: vnfsdk_branch }
            __msb_docker__: { get_param: msb_docker }
            __mvim_docker__: { get_param: mvim_docker }
            __mvim_openstack_docker__: { get_param: mvim_openstack_docker }
            __uui_docker__: { get_param: uui_docker }
            __esr_docker__: { get_param: esr_docker }
            __vnfsdk_repo__: { get_param: vnfsdk_repo }
            __vfc_nokia_docker__: { get_param: vfc_nokia_docker }
            __vfc_nokiav2_docker__: { get_param: vfc_nokiav2_docker }
            __vfc_ztevnfmdriver_docker__: { get_param: vfc_ztevnfmdriver_docker }
            __vfc_multivimproxy_docker__: { get_param: vfc_multivimproxy_docker }
            __vfc_ztesdncdriver_docker__: { get_param: vfc_ztesdncdriver_docker }
            __vfc_vnfres_docker__: { get_param: vfc_vnfres_docker }
            __vfc_vnfmgr_docker__: { get_param: vfc_vnfmgr_docker }
            __vfc_vnflcm_docker__: { get_param: vfc_vnflcm_docker }
            __vfc_resmanagement_docker__: { get_param: vfc_resmanagement_docker }
            __vfc_nslcm_docker__: { get_param: vfc_nslcm_docker }
            __vfc_huawei_docker__: { get_param: vfc_huawei_docker }
            __vfc_jujudriver_docker__: { get_param: vfc_jujudriver_docker }
            __vfc_gvnfmdriver_docker__: { get_param: vfc_gvnfmdriver_docker }
            __vfc_emsdriver_docker__: { get_param: vfc_emsdriver_docker }
            __vfc_catalog_docker__: { get_param: vfc_catalog_docker }
            __vfc_wfengine_mgrservice_docker__: { get_param: vfc_wfengine_mgrservice_docker }
            __vfc_wfengine_activiti_docker__: { get_param: vfc_wfengine_activiti_docker }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_artifact_repo__" > /opt/config/nexus_artifact_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__oam_network_cidr__" > /opt/config/oam_network_cidr.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__vnfsdk_branch__" > /opt/config/vnfsdk_branch.txt
            echo "__msb_docker__" > /opt/config/msb_docker.txt
            echo "__mvim_docker__" > /opt/config/mvim_docker.txt
            echo "__mvim_openstack_docker__" > /opt/config/mvim_openstack_docker.txt
            echo "__uui_docker__" > /opt/config/uui_docker.txt
            echo "__esr_docker__" > /opt/config/esr_docker.txt
            echo "__vnfsdk_repo__" > /opt/config/vnfsdk_repo.txt

            echo "export NOKIA_DOCKER_VER=__vfc_nokia_docker__" >> /opt/config/vfc_docker.txt
            echo "export NOKIAV2_DOCKER_VER=__vfc_nokiav2_docker__" >> /opt/config/vfc_docker.txt
            echo "export MULTIVIMPROXY_DOCKER_VER=__vfc_multivimproxy_docker__" >> /opt/config/vfc_docker.txt
            echo "export ZTEVNFMDRIVER_DOCKER_VER=__vfc_ztevnfmdriver_docker__" >> /opt/config/vfc_docker.txt
            echo "export ZTESDNCDRIVER_DOCKER_VER=__vfc_ztesdncdriver_docker__" >> /opt/config/vfc_docker.txt
            echo "export VNFRES_DOCKER_VER=__vfc_vnfres_docker__" >> /opt/config/vfc_docker.txt
            echo "export VNFMGR_DOCKER_VER=__vfc_vnfmgr_docker__" >> /opt/config/vfc_docker.txt
            echo "export VNFLCM_DOCKER_VER=__vfc_vnflcm_docker__" >> /opt/config/vfc_docker.txt
            echo "export RESMANAGEMENT_DOCKER_VER=__vfc_resmanagement_docker__" >> /opt/config/vfc_docker.txt
            echo "export NSLCM_DOCKER_VER=__vfc_nslcm_docker__" >> /opt/config/vfc_docker.txt
            echo "export HUAWEI_DOCKER_VER=__vfc_huawei_docker__" >> /opt/config/vfc_docker.txt
            echo "export JUJUDRIVER_DOCKER_VER=__vfc_jujudriver_docker__" >> /opt/config/vfc_docker.txt
            echo "export GVNFMDRIVER_DOCKER_VER=__vfc_gvnfmdriver_docker__" >> /opt/config/vfc_docker.txt
            echo "export EMSDRIVER_DOCKER_VER=__vfc_emsdriver_docker__" >> /opt/config/vfc_docker.txt
            echo "export CATALOG_DOCKER_VER=__vfc_catalog_docker__" >> /opt/config/vfc_docker.txt
            echo "export MGRSERVICE_DOCKER_VER=__vfc_wfengine_mgrservice_docker__" >> /opt/config/vfc_docker.txt
            echo "export ACTIVITI_DOCKER_VER=__vfc_wfengine_activiti_docker__" >> /opt/config/vfc_docker.txt

            # Create env file with the IP address of all ONAP components
            echo "export AAI_IP1=__aai1_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export AAI_IP2=__aai2_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export APPC_IP=__appc_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export DCAE_IP=__dcae_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export SO_IP=__so_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export MR_IP=__mr_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export POLICY_IP=__policy_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export PORTAL_IP=__portal_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export ROBOT_IP=__robot_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export SDC_IP=__sdc_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export SDNC_IP=__sdnc_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export VID_IP=__vid_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export CLAMP_IP=__clamp_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export OPENO_IP=__openo_ip_addr__" >> /opt/config/onap_ips.txt

            # Download and run install script
            apt-get -y install unzip
            if [[ "__artifacts_version__" =~ "SNAPSHOT" ]]; then REPO=snapshots; else REPO=releases; fi
            curl -k -L "https://github.com/biny993/onap-multicloud-edge-demo/blob/master/multicloud-edge/boot-1.2.1-mc-edge.zip.bin" -o /opt/boot-__artifacts_version__.zip
            unzip -j /opt/boot-__artifacts_version__.zip -d /opt openo_install.sh
            cd /opt
            chmod +x openo_install.sh
            ./openo_install.sh
